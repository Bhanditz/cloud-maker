#!/usr/bin/env ruby
require 'cloud-maker'

class CloudMakerCLI < Thor
  include Thor::Actions

  desc "user_data [INSTANCE_CONFIG_YAML]", "Generate the Cloud Init user data for an instance described by INSTANCE_CONFIG_YAML"
  method_option :set,
    :alias => '-s',
    :type => :hash,
    :default => {},
    :desc => "Set parameters in the CloudMaker config"
  method_option :tags,
    :alias => '-t',
    :type => :hash,
    :default => {},
    :desc => "Set tags for EC2, merges with and overrides the tag property in the CloudMaker config"
  def user_data(instance_config_yaml)
    config = build_config(instance_config_yaml, options)
    say "User Data:".green
    puts config.to_user_data
  end

  desc "terminate [AWS_INSTANCE_ID]", "Terminate the specified AWS instance"
  def terminate(aws_instance_id)
    say "Not implemented.".red
  end

  desc "info [AWS_INSTANCE_ID]", "Display config info about the specified AWS instance"
  method_option :aws_access_key_id,
    :desc => "Your AWS access key id",
    :default => ENV['AWS_ACCESS_KEY_ID'],
    :required => true
  method_option :aws_secret_access_key,
    :desc => "Your AWS secret access key",
    :default => ENV['AWS_SECRET_ACCESS_KEY'],
    :required => true
  def info(aws_instance_id)
    cloud_maker = CloudMaker::Ec2.new(
      :aws_access_key_id => options.aws_access_key_id,
      :aws_secret_access_key => options.aws_secret_access_key
    )

    info = cloud_maker.info(aws_instance_id)

    print_config_hash(info[:cloud_config])
    puts
    say "Original instance state:".green
    print_colored_hash(info[:instance])
  end

  desc "launch [INSTANCE_CONFIG_YAML]", "Launch a new EC2 instance as described by INSTANCE_CONFIG_YAML"
  method_option :aws_access_key_id,
    :desc => "Your AWS access key id",
    :default => ENV['AWS_ACCESS_KEY_ID'],
    :required => true
  method_option :aws_secret_access_key,
    :desc => "Your AWS secret access key",
    :default => ENV['AWS_SECRET_ACCESS_KEY'],
    :required => true
  method_option :set,
    :alias => '-s',
    :type => :hash,
    :default => {},
    :desc => "Set parameters in the CloudMaker config"
  method_option :tags,
    :alias => '-t',
    :type => :hash,
    :default => {},
    :desc => "Set tags for EC2, merges with and overrides the tag property in the CloudMaker config"
  def launch(instance_config_yaml)
    puts "--------------------------------------------------------------------------------".green
    puts "Launching new EC2 instance"
    puts "--------------------------------------------------------------------------------\n".green

    config = build_config(instance_config_yaml, options)

    print_config_hash(config.to_hash)

    if yes?("Launch a new EC2 instance with the options above? (y/n)")
      cloud_maker = CloudMaker::Ec2.new(
        :aws_access_key_id => options.aws_access_key_id,
        :aws_secret_access_key => options.aws_secret_access_key
      )

      instance = cloud_maker.launch(config)
      puts
      say "Successfully launched new EC2 instance: ".green + instance[:aws_instance_id].magenta
      puts
      print_colored_hash(instance)
    else
      say "Launch aborted!".red
    end
  end

  private
  def print_colored_hash(hash, color=:cyan)
    print_table hash.map {|key, val|
      [key.to_s.dup.send(color), val.to_s]
    }
  end

  def print_config_hash(hash)
    puts
    say "CloudInit configuration:".green
    print_colored_hash hash['cloud-init']
    puts

    if (!hash['include'].empty?)
      puts
      say 'Include URLs:'.green
      hash['include'].each do |url|
        puts url
      end
    end

    puts
    say "CloudMaker configuration:".green
    print_colored_hash hash['cloud-maker']
    puts

    say "Configuration files:".green
    [hash['extra-options']['config_path'], *hash['import']].each do |file|
      puts file
    end
    puts
  end

  def build_config(instance_config_yaml, options)
    config = CloudMaker::Config.from_yaml(instance_config_yaml)
    options.set.each_pair {|key, val| config[key] = val}

    config['tags'] ||= {}
    config['tags'].merge!(options.tags)

    if !config.valid?
      say "Before an instance can be launched we need a few more values to be specified.".yellow
      say "Currently missing: #{config.missing_values.map{|key| key.cyan}.join(', ')}"
      puts

      config.missing_values.each do |key|
        config[key] = ENV[key] if ENV[key]
      end

      config.missing_values.each do |key|
        if (config.options[key]["description"])
          say config.options[key]["description"]
        end
        config[key] = ask "Please choose a value for #{key.cyan}: "
      end
    end

    config
  end
end

CloudMakerCLI.start
