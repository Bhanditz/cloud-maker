#!/usr/bin/env ruby
require 'thor'
require 'colorize'
require 'cloud-maker'
# require 'pry'

class CloudMakerCLI < Thor
  include Thor::Actions

  desc "launch [INSTANCE_CONFIG_YAML]", "Launch a new EC2 instance as described by INSTANCE_CONFIG_YAML"
  method_option :aws_access_key_id,
    :desc => "Your AWS access key id",
    :default => ENV['AWS_ACCESS_KEY_ID'],
    :required => true
  method_option :aws_secret_access_key,
    :desc => "Your AWS secret access key",
    :default => ENV['AWS_SECRET_ACCESS_KEY'],
    :required => true
  method_option :set,
    :alias => '-s',
    :type => :hash,
    :default => {},
    :desc => "Set parameters in the CloudMaker config"
  def launch(instance_config_yaml)
    puts "---------------------------"
    puts "Launching new EC2 instance"
    puts "---------------------------\n"

    config = CloudMaker::Config.from_yaml(instance_config_yaml)
    options.set.each_pair {|key, val| config[key] = val}

    if !config.valid?
      say "Before an instance can be launched we need a few more values to be specified.".yellow
      say "Currently missing: #{config.missing_values.map{|key| key.cyan}.join(', ')}"
      puts

      config.missing_values.each do |key|
        config[key] = ENV[key] if ENV[key]
      end

      config.missing_values.each do |key|
        if (config.options[key]["description"])
          say config.options[key]["description"]
        end
        config[key] = ask "Please choose a value for #{key.cyan}: "
      end
    end

    cloud_maker = CloudMaker::Ec2.new(config,
      :aws_access_key_id => options.aws_access_key_id,
      :aws_secret_access_key => options.aws_secret_access_key
    )

    if (!config.includes.empty?)
      puts
      say 'Include URLs:'.green
      config.includes.each do |url|
        puts url
      end
    end

    puts
    say "CloudMaker configuration:".green
    print_table config.to_hash.map {|key, val| [key.dup.cyan, val]}

    puts
    say "Configuration file:".green + " " + config.extra_options[:config_path]
    puts

    if yes?("Launch a new EC2 instance with the options above? (y/n)")
      instance = cloud_maker.launch
      puts
      say "Successfully launched new EC2 instance: ".green + instance[:aws_instance_id].magenta
      puts
      print_table instance.map {|key, val|
        [key.to_s.cyan, val.to_s]
      }
    else
      say "Launch aborted!".red
    end
  end

  desc "scratch", "Play with Thor"
  def scratch(arg1)
    say 'hello'
    say 'hello in red'.red
  end
end

CloudMakerCLI.start
